library(tidyverse)
library(scales)
library(ggrepel)
library(data.table)
library(stringi)
theme_set(theme_minimal())
library(readxl)
data_corpus <- read_csv("corpus.csv") %>%
rename(id = 1) %>%
mutate(id = as.character(id))
data_corpus <- read_csv("corpus_cleaned_ner.csv") %>%
rename(id = 1) %>%
mutate(id = as.character(id))
data_corpus <- data.table(data_corpus)
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "\\[.*?\\]", "")]  # Supprime tout entre crochets []
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "\\(.*?\\)", "")]  # Supprime tout entre parenthèses ()
data_corpus[, lyrics := stri_replace_first_regex(lyrics, "^\\) Lyrics", "")]  # Supprime ") Lyrics" au début
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "^[[:punct:]]+", "")]
data_corpus[, lyrics := stri_trim_both(lyrics)]  # Supprime les espaces en début/fin
data_corpus <- data.table(data_corpus)
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "\\[.*?\\]", "")]  # Supprime tout entre crochets []
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "\\(.*?\\)", "")]  # Supprime tout entre parenthèses ()
data_corpus[, lyrics := stri_replace_first_regex(lyrics, "^\\) Lyrics", "")]  # Supprime ") Lyrics" au début
data_corpus[, lyrics := stri_replace_all_regex(lyrics, "^[[:punct:]]+", "")]
data_corpus[, lyrics := stri_trim_both(lyrics)]  # Supprime les espaces en début/fin
View(data_corpus)
View(data_corpus)
str(data_corpus)
#| label: mentions-marques
data_corpus[, n_marques := lengths(strsplit(marque, ","))]
top_artists_marques <- data_corpus[, .(total_marques = sum(n_marques, na.rm = TRUE)), by = artist][order(-total_marques)]
# Graphique
ggplot(top_artists_marques[1:10], aes(x = reorder(artist, total_marques), y = total_marques)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Rappeurs mentionnant le plus de marques", x = "Artiste", y = "Nombre de marques")
# Graphique
ggplot(top_artists_marques[1:20], aes(x = reorder(artist, total_marques), y = total_marques)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Rappeurs mentionnant le plus de marques", x = "Artiste", y = "Nombre de marques")
#| label: temporalite-marques
data_corpus[, n_marques := lengths(strsplit(marque, ","))]
temporal_marques <- data_corpus[, .(total_marques = sum(n_marques, na.rm = TRUE)), by = year][!is.na(year)]
ggplot(temporal_marques, aes(x = year, y = total_marques)) +
geom_line() +
labs(title = "Tendance des mentions de marques au fil des années", x = "Année", y = "Nombre de marques")
ggplot(temporal_marques, aes(x = year, y = total_marques)) +
geom_line() +
xlim(1980, 2020) +
labs(title = "Tendance des mentions de marques au fil des années", x = "Année", y = "Nombre de marques")
#| label: produits-mentionnes
data_corpus[, produits_list := unlist(strsplit(produit, ",")), by = id]
#| label: produits-mentionnes
data_corpus[, produits_list := unlist(strsplit(produit, ",")), by = id]
#| label: lieux-mentionnes
data_corpus[, lieux_list := unlist(strsplit(lieu, ",")), by = id]
#| label: produits-mentionnes
data_corpus[, produits_list := unlist(strsplit(produit, ",")), by = id]
#| label: produits-mentionnes
# Expansion des produits
produits_expanded <- data_corpus[, .(produit_split = unlist(strsplit(produit, ","))), by = id]
# Compter les occurrences de chaque produit
produits_count <- produits_expanded[, .(freq = .N), by = produit_split][order(-freq)]
# Visualisation des 10 produits les plus mentionnés
ggplot(produits_count[1:10], aes(x = reorder(produit_split, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Produits les plus mentionnés", x = "Produit", y = "Fréquence")
produits_count <- produits_count[!is.na(produits_count$produit_split)]
# Visualisation des 10 produits les plus mentionnés
ggplot(produits_count[1:10], aes(x = reorder(produit_split, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Produits les plus mentionnés", x = "Produit", y = "Fréquence")
# Visualisation des 10 produits les plus mentionnés
ggplot(produits_count[1:20], aes(x = reorder(produit_split, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Produits les plus mentionnés", x = "Produit", y = "Fréquence")
# Visualisation des 10 produits les plus mentionnés
ggplot(produits_count[1:50], aes(x = reorder(produit_split, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Produits les plus mentionnés", x = "Produit", y = "Fréquence")
# Visualisation des 10 produits les plus mentionnés
ggplot(produits_count[1:40], aes(x = reorder(produit_split, freq), y = freq)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Produits les plus mentionnés", x = "Produit", y = "Fréquence")
#| label: mentions-marques
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus[, n_marques := lengths(strsplit(marque, ","))]
# Calculer le total de marques et de chansons par artiste
marques_par_artiste <- data_corpus[, .(
total_marques = sum(n_marques, na.rm = TRUE),
total_chansons = .N
), by = artist]
# Calculer la proportion de marques par chanson
marques_par_artiste[, proportion_marques := total_marques / total_chansons]
# Trier par proportion décroissante
top_marques_par_artiste <- marques_par_artiste[order(-proportion_marques)]
# Visualiser les 10 premiers artistes
library(ggplot2)
ggplot(top_marques_par_artiste[1:10], aes(x = reorder(artist, proportion_marques), y = proportion_marques)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Proportion de mentions de marques par chanson",
x = "Artiste",
y = "Proportion de marques"
)
ggplot(top_marques_par_artiste[1:50], aes(x = reorder(artist, proportion_marques), y = proportion_marques)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Proportion de mentions de marques par chanson",
x = "Artiste",
y = "Proportion de marques"
)
View(top_marques_par_artiste)
#| label: temporalite-marques
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus[, n_marques := lengths(strsplit(marque, ","))]
# Calculer le total de marques et le nombre de chansons par année
marques_par_annee <- data_corpus[, .(
total_marques = sum(n_marques, na.rm = TRUE),
total_chansons = .N
), by = year][!is.na(year)]
# Calculer la proportion de marques par chanson pour chaque année
marques_par_annee[, proportion_marques := total_marques / total_chansons]
# Visualiser la tendance proportionnelle des marques par année
library(ggplot2)
ggplot(marques_par_annee, aes(x = year, y = proportion_marques)) +
geom_line() +
xlim(1980, 2020) +
labs(
title = "Proportion des mentions de marques au fil des années",
x = "Année",
y = "Proportion de marques par chanson"
)
View(temporal_marques)
table(data_corpus$$year)
table(data_corpus)
table(data_corpus$year)
ggplot(marques_par_annee, aes(x = year, y = proportion_marques)) +
geom_line() +
xlim(1990, 2020) +
labs(
title = "Proportion des mentions de marques au fil des années",
x = "Année",
y = "Proportion de marques par chanson"
)
library(highcharter)
# Création du graphique interactif avec Highcharter
highchart() %>%
hc_chart(type = "line") %>%
hc_title(text = "Proportion des mentions de marques au fil des années") %>%
hc_xAxis(title = list(text = "Année"), categories = marques_par_annee$year) %>%
hc_yAxis(title = list(text = "Proportion de marques par chanson")) %>%
hc_series(
list(
name = "Proportion de marques",
data = marques_par_annee$proportion_marques
)
) %>%
hc_tooltip(pointFormat = "Année: {point.category}<br>Proportion: {point.y:.4f}")
## on filtre les chansons entre 1990 et 2024
marques_par_annee <- marques_par_annee[year >= 1990 & year <= 2024]
# Calculer la proportion de marques par chanson pour chaque année
marques_par_annee[, proportion_marques := total_marques / total_chansons]
# Visualiser la tendance proportionnelle des marques par année
library(ggplot2)
# Création du graphique interactif avec Highcharter
highchart() %>%
hc_chart(type = "line") %>%
hc_title(text = "Proportion des mentions de marques au fil des années") %>%
hc_xAxis(title = list(text = "Année"), categories = marques_par_annee$year) %>%
hc_yAxis(title = list(text = "Proportion de marques par chanson")) %>%
hc_series(
list(
name = "Proportion de marques",
data = marques_par_annee$proportion_marques
)
) %>%
hc_tooltip(pointFormat = "Année: {point.category}<br>Proportion: {point.y:.4f}")
#arrange desc by year
marques_par_annee <- marques_par_annee[order(year)]
# Création du graphique interactif avec Highcharter
highchart() %>%
hc_chart(type = "line") %>%
hc_title(text = "Proportion des mentions de marques au fil des années") %>%
hc_xAxis(title = list(text = "Année"), categories = marques_par_annee$year) %>%
hc_yAxis(title = list(text = "Proportion de marques par chanson")) %>%
hc_series(
list(
name = "Proportion de marques",
data = marques_par_annee$proportion_marques
)
) %>%
hc_tooltip(pointFormat = "Année: {point.category}<br>Proportion: {point.y:.4f}")
top_artistes_pageviews <- data_corpus[, .(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = .N
), by = artist][order(-total_pageviews)]
# Sélectionner les 10 artistes ayant le plus de `pageviews`
top_10_artistes <- top_artistes_pageviews[1:10]
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus[artist %in% top_10_artistes$artist]
# Calculer la proportion de marques par chanson pour chaque artiste et chaque année
proportion_marques_par_artiste <- data_top_10[, .(
total_marques = sum(n_marques, na.rm = TRUE),
total_chansons = .N
), by = .(artist, year)][!is.na(year)]
proportion_marques_par_artiste[, proportion_marques := total_marques / total_chansons]
# Créer un graphique interactif avec Highcharter
highchart() %>%
hc_chart(type = "line") %>%
hc_title(text = "Proportion des mentions de marques par chanson pour les 10 artistes les plus populaires") %>%
hc_xAxis(title = list(text = "Année")) %>%
hc_yAxis(title = list(text = "Proportion de marques par chanson")) %>%
hc_add_series_list(
lapply(
unique(proportion_marques_par_artiste$artist),
function(artist_name) {
artist_data <- proportion_marques_par_artiste[artist == artist_name]
list(
name = artist_name,
data = list_parse2(data.frame(x = artist_data$year, y = artist_data$proportion_marques))
)
}
)
) %>%
hc_tooltip(pointFormat = "Année: {point.x}<br>Proportion: {point.y:.4f}<br>Artiste: {series.name}")
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Calculer la proportion de marques par chanson pour chaque artiste et chaque année
proportion_marques_par_artiste <- data_top_10 %>%
group_by(artist, year) %>%
summarise(
total_marques = sum(n_marques, na.rm = TRUE),
total_chansons = n(),
.groups = "drop"
) %>%
mutate(proportion_marques = total_marques / total_chansons) %>%
filter(!is.na(year))
# Créer un graphique interactif avec Highcharter
highchart() %>%
hc_chart(type = "line") %>%
hc_title(text = "Proportion des mentions de marques par chanson pour les 10 artistes les plus populaires") %>%
hc_xAxis(title = list(text = "Année")) %>%
hc_yAxis(title = list(text = "Proportion de marques par chanson")) %>%
hc_add_series_list(
lapply(
unique(proportion_marques_par_artiste$artist),
function(artist_name) {
artist_data <- proportion_marques_par_artiste %>% filter(artist == artist_name)
list(
name = artist_name,
data = list_parse2(data.frame(x = artist_data$year, y = artist_data$proportion_marques))
)
}
)
) %>%
hc_tooltip(pointFormat = "Année: {point.x}<br>Proportion: {point.y:.4f}<br>Artiste: {series.name}")
#| label: keyness-marques
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Préparer les marques pour l'analyse
# Séparer les marques en une seule liste par artiste
expanded_data <- data_top_10 %>%
mutate(marque_split = strsplit(marque, ",")) %>%
unnest(marque_split) %>%
filter(!is.na(marque_split))
# Créer un corpus avec quanteda
corpus <- corpus(expanded_data, text_field = "marque_split")
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
#| label: keyness-marques
library(quanteda)
#| label: keyness-marques
library(quanteda)
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Préparer les marques pour l'analyse
# Séparer les marques en une seule liste par artiste
expanded_data <- data_top_10 %>%
mutate(marque_split = strsplit(marque, ",")) %>%
unnest(marque_split) %>%
filter(!is.na(marque_split))
# Créer un corpus avec quanteda
corpus <- corpus(expanded_data, text_field = "marque_split")
# Créer une Document-Feature Matrix (DFM)
dfm <- dfm(corpus, groups = "artist")
#| label: keyness-marques
library(quanteda)
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Préparer les marques pour l'analyse
# Séparer les marques en une seule liste par artiste
expanded_data <- data_top_10 %>%
mutate(marque_split = strsplit(marque, ",")) %>%
unnest(marque_split) %>%
filter(!is.na(marque_split))
# Créer un corpus avec quanteda
corpus <- corpus(expanded_data, text_field = "marque_split")
# Tokenisation
tokens <- tokens(corpus)
# Création de la DFM
dfm <- dfm(tokens) %>%
dfm_group(groups = docvars(corpus, "artist"))
# Calculer le keyness pour chaque marque en comparant un artiste contre tous les autres
results_list <- lapply(unique(docvars(dfm)$artist), function(artist) {
keyness <- textstat_keyness(dfm, target = artist)
keyness %>%
slice_max(chi2, n = 10) %>%
mutate(artist = artist)
})
library(quanteda.textstats)
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Créer un corpus avec quanteda
corpus <- corpus(expanded_data, text_field = "marque_split")
# Tokenisation
tokens <- tokens(corpus)
# Création de la DFM
dfm <- dfm(tokens) %>%
dfm_group(groups = docvars(corpus, "artist"))
# Calculer le keyness pour chaque marque en comparant un artiste contre tous les autres
results_list <- lapply(unique(docvars(dfm)$artist), function(artist) {
keyness <- textstat_keyness(dfm, target = artist)
keyness %>%
slice_max(chi2, n = 10) %>%
mutate(artist = artist)
})
# Afficher les 10 premières lignes
print(head(keyness_table, 10))
# Calculer le keyness pour chaque marque en comparant un artiste contre tous les autres
results_list <- lapply(unique(docvars(dfm)$artist), function(artist) {
keyness <- textstat_keyness(dfm, target = artist)
keyness %>%
slice_max(chi2, n = 10) %>%
mutate(artist = artist)
})
# Combiner tous les résultats dans un tableau
keyness_table <- bind_rows(results_list)
# Afficher les 10 premières lignes
print(head(keyness_table, 10))
# Visualisation des résultats pour un exemple d'artiste
library(ggplot2)
artist_name <- "Jul" # Remplacer par l'artiste souhaité
ggplot(keyness_table %>% filter(artist == artist_name), aes(x = reorder(feature, chi2), y = chi2)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = paste("Keyness des marques pour", artist_name),
x = "Marques",
y = "Chi2 (Keyness)"
)
#| label: keyness-marques
library(quanteda)
library(quanteda.textstats)
# Ajouter une colonne avec le nombre de marques mentionnées par chanson
data_corpus <- data_corpus %>%
mutate(n_marques = lengths(strsplit(marque, ",")))
# Calculer les `pageviews` totaux pour chaque rappeur
top_artistes_pageviews <- data_corpus %>%
group_by(artist) %>%
summarise(
total_pageviews = sum(pageviews, na.rm = TRUE),
total_chansons = n()
) %>%
arrange(desc(total_pageviews)) %>%
slice(1:10)
# Filtrer les données pour ces artistes
data_top_10 <- data_corpus %>%
filter(artist %in% top_artistes_pageviews$artist)
# Préparer les marques pour l'analyse
# Séparer les marques en une seule liste par artiste
expanded_data <- data_top_10 %>%
mutate(marque_split = strsplit(marque, ",")) %>%
unnest(marque_split) %>%
filter(!is.na(marque_split))
# Créer un corpus avec quanteda
corpus <- corpus(expanded_data, text_field = "marque_split")
# Tokenisation
tokens <- tokens(corpus)
# Création de la DFM
dfm <- dfm(tokens) %>%
dfm_group(groups = docvars(corpus, "artist"))
# Calculer le keyness pour chaque marque en comparant un artiste contre tous les autres
results_list <- lapply(unique(docvars(dfm)$artist), function(artist) {
keyness <- textstat_keyness(dfm, target = artist)
keyness %>%
slice_max(chi2, n = 10) %>%
mutate(artist = artist)
})
# Combiner tous les résultats dans un tableau
keyness_table <- bind_rows(results_list)
# Afficher les 10 premières lignes
print(head(keyness_table, 10))
# Visualisation des résultats pour un exemple d'artiste
library(ggplot2)
artist_name <- "Jul" # Remplacer par l'artiste souhaité
ggplot(keyness_table %>% filter(artist == artist_name), aes(x = reorder(feature, chi2), y = chi2)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = paste("Keyness des marques pour", artist_name),
x = "Marques",
y = "Chi2 (Keyness)"
)
View(results_list)
# Afficher les 10 premières lignes
print(head(keyness_table, 10))
# Visualisation des résultats pour un exemple d'artiste
library(ggplot2)
artist_name <- "Jul" # Remplacer par l'artiste souhaité
ggplot(keyness_table %>% filter(artist == artist_name), aes(x = reorder(feature, chi2), y = chi2)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = paste("Keyness des marques pour", artist_name),
x = "Marques",
y = "Chi2 (Keyness)"
)
View(keyness_table)
